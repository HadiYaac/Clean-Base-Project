//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `RegistrationNotView`.
    static let registrationNotView = Rswift.ImageResource(bundle: R.hostingBundle, name: "RegistrationNotView")
    /// Image `RegistrationView`.
    static let registrationView = Rswift.ImageResource(bundle: R.hostingBundle, name: "RegistrationView")
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")
    /// Image `offline`.
    static let offline = Rswift.ImageResource(bundle: R.hostingBundle, name: "offline")
    
    /// `UIImage(named: "RegistrationNotView", bundle: ..., traitCollection: ...)`
    static func registrationNotView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.registrationNotView, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RegistrationView", bundle: ..., traitCollection: ...)`
    static func registrationView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.registrationView, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "offline", bundle: ..., traitCollection: ...)`
    static func offline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offline, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `BaseWebView`.
    static let baseWebView = _R.storyboard.baseWebView()
    /// Storyboard `ChangePassword`.
    static let changePassword = _R.storyboard.changePassword()
    /// Storyboard `Initial`.
    static let initial = _R.storyboard.initial()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "BaseWebView", bundle: ...)`
    static func baseWebView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.baseWebView)
    }
    
    /// `UIStoryboard(name: "ChangePassword", bundle: ...)`
    static func changePassword(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.changePassword)
    }
    
    /// `UIStoryboard(name: "Initial", bundle: ...)`
    static func initial(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.initial)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try baseWebView.validate()
      try initial.validate()
      try changePassword.validate()
    }
    
    struct baseWebView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseWebViewViewController
      
      let baseWebViewViewControllerVC = StoryboardViewControllerResource<BaseWebViewViewController>(identifier: "BaseWebViewViewControllerVC")
      let bundle = R.hostingBundle
      let name = "BaseWebView"
      
      func baseWebViewViewControllerVC(_: Void = ()) -> BaseWebViewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: baseWebViewViewControllerVC)
      }
      
      static func validate() throws {
        if _R.storyboard.baseWebView().baseWebViewViewControllerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'baseWebViewViewControllerVC' could not be loaded from storyboard 'BaseWebView' as 'BaseWebViewViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct changePassword: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let changePasswordViewControllerTableVC = StoryboardViewControllerResource<ChangePasswordViewController>(identifier: "ChangePasswordViewControllerTableVC")
      let name = "ChangePassword"
      
      func changePasswordViewControllerTableVC(_: Void = ()) -> ChangePasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordViewControllerTableVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "RegistrationNotView") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RegistrationNotView' is used in storyboard 'ChangePassword', but couldn't be loaded.") }
        if _R.storyboard.changePassword().changePasswordViewControllerTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordViewControllerTableVC' could not be loaded from storyboard 'ChangePassword' as 'ChangePasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct initial: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = InitialViewController
      
      let bundle = R.hostingBundle
      let initialViewControllerVC = StoryboardViewControllerResource<InitialViewController>(identifier: "InitialViewControllerVC")
      let name = "Initial"
      
      func initialViewControllerVC(_: Void = ()) -> InitialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initialViewControllerVC)
      }
      
      static func validate() throws {
        if _R.storyboard.initial().initialViewControllerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initialViewControllerVC' could not be loaded from storyboard 'Initial' as 'InitialViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
